<?php
/**
 * Equipment
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Swagger MZ ORB
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Equipment Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Equipment implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Equipment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'inventory_number' => 'string',
        'serial_number' => 'string',
        'type' => 'object',
        'name' => 'string',
        'description' => 'string',
        'status' => 'object',
        'commissioning_date' => 'string',
        'decommissioning_date' => 'string',
        'last_service_date' => 'string',
        'planned_service_date' => 'string',
        'documents' => 'string[]',
        'is_deleted' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'inventory_number' => null,
        'serial_number' => null,
        'type' => null,
        'name' => null,
        'description' => null,
        'status' => null,
        'commissioning_date' => null,
        'decommissioning_date' => null,
        'last_service_date' => null,
        'planned_service_date' => null,
        'documents' => null,
        'is_deleted' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'inventory_number' => false,
		'serial_number' => false,
		'type' => false,
		'name' => false,
		'description' => false,
		'status' => false,
		'commissioning_date' => false,
		'decommissioning_date' => false,
		'last_service_date' => false,
		'planned_service_date' => false,
		'documents' => false,
		'is_deleted' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'inventory_number' => 'inventoryNumber',
        'serial_number' => 'serialNumber',
        'type' => 'type',
        'name' => 'name',
        'description' => 'description',
        'status' => 'status',
        'commissioning_date' => 'commissioningDate',
        'decommissioning_date' => 'decommissioningDate',
        'last_service_date' => 'lastServiceDate',
        'planned_service_date' => 'plannedServiceDate',
        'documents' => 'documents',
        'is_deleted' => 'isDeleted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'inventory_number' => 'setInventoryNumber',
        'serial_number' => 'setSerialNumber',
        'type' => 'setType',
        'name' => 'setName',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'commissioning_date' => 'setCommissioningDate',
        'decommissioning_date' => 'setDecommissioningDate',
        'last_service_date' => 'setLastServiceDate',
        'planned_service_date' => 'setPlannedServiceDate',
        'documents' => 'setDocuments',
        'is_deleted' => 'setIsDeleted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'inventory_number' => 'getInventoryNumber',
        'serial_number' => 'getSerialNumber',
        'type' => 'getType',
        'name' => 'getName',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'commissioning_date' => 'getCommissioningDate',
        'decommissioning_date' => 'getDecommissioningDate',
        'last_service_date' => 'getLastServiceDate',
        'planned_service_date' => 'getPlannedServiceDate',
        'documents' => 'getDocuments',
        'is_deleted' => 'getIsDeleted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('inventory_number', $data ?? [], null);
        $this->setIfExists('serial_number', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('commissioning_date', $data ?? [], null);
        $this->setIfExists('decommissioning_date', $data ?? [], null);
        $this->setIfExists('last_service_date', $data ?? [], null);
        $this->setIfExists('planned_service_date', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('is_deleted', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets inventory_number
     *
     * @return string|null
     */
    public function getInventoryNumber()
    {
        return $this->container['inventory_number'];
    }

    /**
     * Sets inventory_number
     *
     * @param string|null $inventory_number inventory_number
     *
     * @return self
     */
    public function setInventoryNumber($inventory_number)
    {

        if (is_null($inventory_number)) {
            throw new \InvalidArgumentException('non-nullable inventory_number cannot be null');
        }

        $this->container['inventory_number'] = $inventory_number;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string|null
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string|null $serial_number serial_number
     *
     * @return self
     */
    public function setSerialNumber($serial_number)
    {

        if (is_null($serial_number)) {
            throw new \InvalidArgumentException('non-nullable serial_number cannot be null');
        }

        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets type
     *
     * @return object|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param object|null $type type
     *
     * @return self
     */
    public function setType($type)
    {

        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }

        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return object|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param object|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets commissioning_date
     *
     * @return string|null
     */
    public function getCommissioningDate()
    {
        return $this->container['commissioning_date'];
    }

    /**
     * Sets commissioning_date
     *
     * @param string|null $commissioning_date с точностью до дня
     *
     * @return self
     */
    public function setCommissioningDate($commissioning_date)
    {

        if (is_null($commissioning_date)) {
            throw new \InvalidArgumentException('non-nullable commissioning_date cannot be null');
        }

        $this->container['commissioning_date'] = $commissioning_date;

        return $this;
    }

    /**
     * Gets decommissioning_date
     *
     * @return string|null
     */
    public function getDecommissioningDate()
    {
        return $this->container['decommissioning_date'];
    }

    /**
     * Sets decommissioning_date
     *
     * @param string|null $decommissioning_date с точностью до дня
     *
     * @return self
     */
    public function setDecommissioningDate($decommissioning_date)
    {

        if (is_null($decommissioning_date)) {
            throw new \InvalidArgumentException('non-nullable decommissioning_date cannot be null');
        }

        $this->container['decommissioning_date'] = $decommissioning_date;

        return $this;
    }

    /**
     * Gets last_service_date
     *
     * @return string|null
     */
    public function getLastServiceDate()
    {
        return $this->container['last_service_date'];
    }

    /**
     * Sets last_service_date
     *
     * @param string|null $last_service_date с точностью до дня
     *
     * @return self
     */
    public function setLastServiceDate($last_service_date)
    {

        if (is_null($last_service_date)) {
            throw new \InvalidArgumentException('non-nullable last_service_date cannot be null');
        }

        $this->container['last_service_date'] = $last_service_date;

        return $this;
    }

    /**
     * Gets planned_service_date
     *
     * @return string|null
     */
    public function getPlannedServiceDate()
    {
        return $this->container['planned_service_date'];
    }

    /**
     * Sets planned_service_date
     *
     * @param string|null $planned_service_date с точностью до дня
     *
     * @return self
     */
    public function setPlannedServiceDate($planned_service_date)
    {

        if (is_null($planned_service_date)) {
            throw new \InvalidArgumentException('non-nullable planned_service_date cannot be null');
        }

        $this->container['planned_service_date'] = $planned_service_date;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return string[]|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param string[]|null $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {

        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }

        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets is_deleted
     *
     * @return bool|null
     */
    public function getIsDeleted()
    {
        return $this->container['is_deleted'];
    }

    /**
     * Sets is_deleted
     *
     * @param bool|null $is_deleted is_deleted
     *
     * @return self
     */
    public function setIsDeleted($is_deleted)
    {

        if (is_null($is_deleted)) {
            throw new \InvalidArgumentException('non-nullable is_deleted cannot be null');
        }

        $this->container['is_deleted'] = $is_deleted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


